{"version":3,"file":"index.js","sources":["../node_modules/_void-elements@3.1.0@void-elements/index.js","../src/parse/parse-tag.js","../src/parse/index.js","../src/index.js"],"sourcesContent":["/**\n * This file automatically generated from `pre-publish.js`.\n * Do not manually edit.\n */\n\nmodule.exports = {\n  \"area\": true,\n  \"base\": true,\n  \"br\": true,\n  \"col\": true,\n  \"embed\": true,\n  \"hr\": true,\n  \"img\": true,\n  \"input\": true,\n  \"link\": true,\n  \"meta\": true,\n  \"param\": true,\n  \"source\": true,\n  \"track\": true,\n  \"wbr\": true\n};\n","/**\n * parse tag\n * @type {RegExp}\n */\nimport voidElements from 'void-elements';\n\nvar attrRE = /([\\w-]+)|=|(['\"])([.\\s\\S]*?)\\2/g;\n\nexport default function parseTag(tag, options) {\n  var i = 0;\n  var key;\n  var expectingValueAfterEquals = true;\n  var res = {\n    [options.type]: 'tag',\n    [options.name]: '',\n    [options.voidElement]: false,\n    [options.attrs]: {},\n    [options.children]: [],\n  };\n\n  tag.replace(attrRE, function(match) {\n    if (match === '=') {\n      expectingValueAfterEquals = true;\n      i++;\n      return;\n    }\n\n    if (!expectingValueAfterEquals) {\n      if (key) {\n        res[options.attrs][key] = key; // boolean attribute\n      }\n      key = match;\n    } else {\n      if (i === 0) {\n        if (voidElements[match] || tag.charAt(tag.length - 2) === '/') {\n          res[options.voidElement] = true;\n        }\n        res[options.name] = match;\n      } else {\n        res[options.attrs][key] = match.replace(/^['\"]|['\"]$/g, '');\n        key = undefined;\n      }\n    }\n    i++;\n    expectingValueAfterEquals = false;\n  });\n\n  return res;\n}\n","/**\n * parse html to tree\n * @type {RegExp}\n */\nimport parseTag from './parse-tag';\n\nvar tagRE = /(?:<!--[\\S\\s]*?-->|<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>)/g;\n// re-used obj for quick lookups of components\nvar empty = Object.create ? Object.create(null) : {};\n\n/**\n * common logic for pushing a child node onto a list\n * @param list\n * @param html\n * @param level\n * @param start\n * @param ignoreWhitespace\n */\nfunction pushTextNode(list, html, level, start, ignoreWhitespace) {\n  // calculate correct end of the content slice in case there's\n  // no tag after the text node.\n  var end = html.indexOf('<', start);\n  var content = html.slice(start, end === -1 ? undefined : end);\n  // if a node is nothing but whitespace, collapse it as the spec states:\n  // https://www.w3.org/TR/html4/struct/text.html#h-9.1\n  if (/^\\s*$/.test(content)) {\n    content = ' ';\n  }\n  // don't add whitespace-only text nodes if they would be trailing text nodes\n  // or if they would be leading whitespace-only text nodes:\n  //  * end > -1 indicates this is not a trailing text node\n  //  * leading node is when level is -1 and list has length 0\n  if (\n    (!ignoreWhitespace && end > -1 && level + list.length >= 0) ||\n    content !== ' '\n  ) {\n    list.push({\n      type: 'text',\n      content: content,\n    });\n  }\n}\n\nvar defaultOptions = {\n  ignoreWhitespace: true,\n  components: empty,\n  // tree key config\n  type: 'type',\n  name: 'name',\n  attrs: 'attrs',\n  children: 'children',\n  voidElement: 'voidElement',\n};\n\nexport default function parse(html, options = {}) {\n  options = Object.assign({}, defaultOptions, options);\n\n  var result = [];\n  var current;\n  var level = -1;\n  var arr = [];\n  var byTag = {};\n  var inComponent = false;\n\n  html.replace(tagRE, function(tag, index) {\n    if (inComponent) {\n      if (tag !== '</' + current[options.name] + '>') {\n        return;\n      } else {\n        inComponent = false;\n      }\n    }\n\n    var isOpen = tag.charAt(1) !== '/';\n    var isComment = tag.indexOf('<!--') === 0;\n    var start = index + tag.length;\n    var nextChar = html.charAt(start);\n    var parent;\n    if (isOpen && !isComment) {\n      level++;\n\n      current = parseTag(tag, options);\n      if (\n        current[options.type] === 'tag' &&\n        options.components[current[options.name]]\n      ) {\n        current[options.type] = 'component';\n        inComponent = true;\n      }\n\n      if (\n        !current[options.voidElement] &&\n        !inComponent &&\n        nextChar &&\n        nextChar !== '<'\n      ) {\n        pushTextNode(\n          current[options.children],\n          html,\n          level,\n          start,\n          options.ignoreWhitespace,\n        );\n      }\n\n      byTag[current.tagName] = current;\n\n      // if we're at root, push new base node\n      if (level === 0) {\n        result.push(current);\n      }\n\n      parent = arr[level - 1];\n\n      if (parent) {\n        parent.children.push(current);\n      }\n\n      arr[level] = current;\n    }\n\n    if (isComment || !isOpen || current[options.voidElement]) {\n      if (!isComment) {\n        level--;\n      }\n      if (!inComponent && nextChar !== '<' && nextChar) {\n        // trailing text node\n        // if we're at the root, push a base text node. otherwise add as\n        // a child to the current node.\n        parent = level === -1 ? result : arr[level][options.children];\n        pushTextNode(parent, html, level, start, options.ignoreWhitespace);\n      }\n    }\n  });\n\n  // If the \"html\" passed isn't actually html, add it as a text node.\n  if (!result.length && html.length) {\n    pushTextNode(result, html, 0, 0, options.ignoreWhitespace);\n  }\n\n  return result;\n}\n","/**\n * transform html to json schema of React style\n * Created by beizhu on 2019/7/27.\n */\n\n// import htmlParser from 'html-parse-stringify2';\nimport parse from './parse/index';\n\nconst OPTIONS = {\n  // text node component name\n  textCompName: 'text',\n  // use new schema spec\n  useNewSchema: true,\n};\n\nconst html2schema = (html, options = {}) => {\n  options = Object.assign({}, OPTIONS, options);\n\n  // schema key config\n  const htmlTree = parse(html, {\n    name: 'component',\n    attrs: 'props',\n  });\n\n  let rootNode = {\n    children: htmlTree,\n    props: {},\n    component: 'div',\n  };\n  return JSON.stringify(deepTraverseTree(rootNode, options));\n};\n\n/**\n * deep traverse tree\n * @param node\n * @param useNewSchema\n * @param textCompName\n * @return {*}\n */\nfunction deepTraverseTree(node, { useNewSchema, textCompName }) {\n  if (node) {\n    let stack = [];\n    stack.push(node);\n    while (stack.length !== 0) {\n      let item = stack.pop();\n      if (item.type !== undefined) {\n        delete item.type;\n      }\n      if (item.voidElement !== undefined) {\n        delete item.voidElement;\n      }\n      if (item.props) {\n        // class => className\n        if (item.props.class) {\n          item.props.className = item.props.class;\n          delete item.props.class;\n        }\n        // style string => style object\n        if (item.props.style) {\n          let style = {};\n          let styleList = item.props.style.split(';');\n          for (let key in styleList) {\n            let styleItem = styleList[key];\n            let styleName = styleItem.substr(0, styleItem.indexOf(':')).trim();\n            let styleValue = styleItem\n              .substr(styleItem.indexOf(':') + 1)\n              .trim();\n            if (styleName) {\n              style[styleName] = styleValue;\n            }\n          }\n          item.props.style = style;\n        }\n      }\n\n      if (item.children) {\n        if (useNewSchema) {\n          // use new schema\n          item.children = item.children.map(child => {\n            if (child.content !== undefined) {\n              child = {\n                component: textCompName,\n                props: {\n                  content: child.content,\n                },\n                children: [],\n              };\n            }\n            return child;\n          });\n        } else {\n          // use old schema\n          item.children = item.children.filter(child => {\n            if (child.content !== undefined) {\n              item.props['data_text'] = child.content;\n              return false;\n            }\n            return true;\n          });\n        }\n        let children = item.children;\n        for (let i = children.length - 1; i >= 0; i--) {\n          stack.push(children[i]);\n        }\n      }\n    }\n  }\n  return node;\n}\n\nexport default html2schema;\n"],"names":["attrRE","parseTag","tag","options","i","key","expectingValueAfterEquals","res","type","name","voidElement","attrs","children","replace","match","voidElements","charAt","length","undefined","tagRE","empty","Object","create","pushTextNode","list","html","level","start","ignoreWhitespace","end","indexOf","content","slice","test","push","defaultOptions","components","parse","assign","result","current","arr","byTag","inComponent","index","isOpen","isComment","nextChar","parent","tagName","OPTIONS","textCompName","useNewSchema","html2schema","htmlTree","rootNode","props","component","JSON","stringify","deepTraverseTree","node","stack","item","pop","class","className","style","styleList","split","styleItem","styleName","substr","trim","styleValue","map","child","filter"],"mappings":"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"}